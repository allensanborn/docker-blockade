diff --git a/blockade/config.py b/blockade/config.py
index d63d1c6..f2b6a7d 100644
--- a/blockade/config.py
+++ b/blockade/config.py
@@ -25,20 +25,18 @@ class BlockadeContainerConfig(object):
         return BlockadeContainerConfig(
             name, d['image'],
             command=d.get('command'), links=d.get('links'),
-            lxc_conf=d.get('lxc_conf'), volumes=d.get('volumes'),
-            publish_ports=d.get('ports'), expose_ports=d.get('expose'),
-            environment=d.get('environment'))
+            volumes=d.get('volumes'), publish_ports=d.get('ports'),
+            expose_ports=d.get('expose'), environment=d.get('environment'))
 
-    def __init__(self, name, image, command=None, links=None, lxc_conf=None,
-                 volumes=None, publish_ports=None, expose_ports=None, environment=None):
+    def __init__(self, name, image, command=None, links=None, volumes=None,
+            publish_ports=None, expose_ports=None, environment=None):
         self.name = name
         self.image = image
         self.command = command
         self.links = _dictify(links, "links")
-        self.lxc_conf = dict(lxc_conf or {})
         self.volumes = _dictify(volumes, "volumes")
         self.publish_ports = _dictify(publish_ports, "ports")
-        self.expose_ports = _dictify(expose_ports, "expose")
+        self.expose_ports = expose_ports
         self.environment = dict(environment or {})
 
 
diff --git a/blockade/core.py b/blockade/core.py
index af57499..cc3271a 100644
--- a/blockade/core.py
+++ b/blockade/core.py
@@ -15,6 +15,8 @@
 #
 
 from copy import deepcopy
+import subprocess
+import re
 
 import docker
 
@@ -34,24 +36,25 @@ class Blockade(object):
     def create(self):
         container_state = {}
         for container in self.config.sorted_containers:
-            veth_device = self.network.new_veth_device_name()
-            container_state[container.name] = {"veth_device": veth_device}
+            container_state[container.name] = {}
 
-        # generate blockade ID and persist
         state = self.state_factory.initialize(container_state)
 
         container_descriptions = []
         for container in self.config.sorted_containers:
-            veth_device = container_state[container.name]['veth_device']
-            container_id = self._start_container(state.blockade_id, container,
-                                                 veth_device)
+            container_id = self._start_container(state.blockade_id, container)
             description = self._get_container_description(
                 state, container.name, container_id)
             container_descriptions.append(description)
+            #container_state[container.name]['veth_device'] = description.veth_device
+
+        # TODO: highly racy. it'll do for now
+        self.state_factory.destroy()
+        state = self.state_factory.initialize(container_state, state.blockade_id)
 
         return container_descriptions
 
-    def _start_container(self, blockade_id, container, veth_device):
+    def _start_container(self, blockade_id, container):
         container_name = docker_container_name(blockade_id, container.name)
         volumes = list(container.volumes.values()) or None
         response = self.docker_client.create_container(
@@ -63,10 +66,8 @@ class Blockade(object):
         links = dict((docker_container_name(blockade_id, link), alias)
                      for link, alias in container.links.items())
 
-        lxc_conf = deepcopy(container.lxc_conf)
-        lxc_conf['lxc.network.veth.pair'] = veth_device
-        self.docker_client.start(container_id, lxc_conf=lxc_conf, links=links,
-            binds=container.volumes, port_bindings=container.publish_ports)
+        self.docker_client.start(container_id, links=links, binds=container.volumes,
+            port_bindings=container.publish_ports)
         return container_id
 
     def _get_container_description(self, state, name, container_id,
@@ -93,10 +94,18 @@ class Blockade(object):
             if ip:
                 extras['ip_address'] = ip
 
+        device = None
+
         if (network_state and name in state.containers
                 and container_state == ContainerState.UP):
-            device = state.containers[name]['veth_device']
-            extras['veth_device'] = device
+
+            cmd = ['nsenter', '--target', str(state_dict['Pid']), '--net', 'ethtool', '-S', 'eth0']
+            output = subprocess.check_output(cmd)
+            peeridx = re.search(' ([0-9]+)$', output.strip()).group(1)
+            cmd = ['ip', 'link']
+            output = subprocess.check_output(cmd)
+            device = re.search('^' + peeridx + ': ([^:]+):', output, re.M).group(1)
+
             extras['network_state'] = self.network.network_state(device)
 
             # include partition ID if we were provided a map of them
@@ -104,7 +113,8 @@ class Blockade(object):
                 extras['partition'] = ip_partitions.get(ip)
         else:
             extras['network_state'] = NetworkState.UNKNOWN
-            extras['veth_device'] = None
+
+        extras['veth_device'] = device
 
         return Container(name, container_id, container_state, **extras)
 
